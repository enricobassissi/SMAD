function vector = faking_a_bit(vector,time,idx_zero,how_much,ID_back_forw)

% vector: vector with a discontiunity at some point, that goes to zero
% time: vector of time evaluation of the vector quantity
% idx_zero: where the zero is placed
% how_much: how much do you want to go away from that point to start the spline
% ID_back_forw: is this smoothing going forward (+1) or backward (-1)?

switch ID_back_forw
    case -1
        first_ast_zero = vector(idx_zero);
%         min_smoothing_prev = min(vector(idx_zero-how_much:idx_zero-1));
%         idx_start_spline = find(min_smoothing_prev == vector);
        min_smoothing_prev = vector(idx_zero-how_much);
        idx_start_spline = idx_zero-how_much;
        x = [time(idx_start_spline),...
            time(idx_start_spline+round((idx_zero-idx_start_spline)/5)),...
            time(idx_start_spline+round((idx_zero-idx_start_spline)*2/5)),...
            time(idx_start_spline+round((idx_zero-idx_start_spline)*3/5)),...
            time(idx_start_spline+round((idx_zero-idx_start_spline)*4/5)),...
            time(idx_zero)];
        y = [first_ast_zero+(min_smoothing_prev-first_ast_zero),...
            first_ast_zero+(min_smoothing_prev-first_ast_zero)*4/5,...
            first_ast_zero+(min_smoothing_prev-first_ast_zero)*3/5,...
            first_ast_zero+(min_smoothing_prev-first_ast_zero)*2/5,...
            first_ast_zero+(min_smoothing_prev-first_ast_zero)/5,...
            first_ast_zero];
        xx = linspace(time(idx_start_spline),time(idx_zero),(idx_zero-idx_start_spline)+1);
        vector(idx_start_spline:idx_zero) = spline(x,y,xx);
        vector = smooth(vector,2);
        
	case +1
        first_ast_zero = vector(idx_zero);
%         max_smoothing_prev = max(vector(idx_zero+1:idx_zero+how_much));
%         idx_end_spline = find(max_smoothing_prev == vector);
        max_smoothing_prev = vector(idx_zero+how_much);
        idx_end_spline = idx_zero+how_much;
        x = [time(idx_zero),...
            time(idx_zero+round((idx_end_spline-idx_zero)/5)),...
            time(idx_zero+round((idx_end_spline-idx_zero)*2/5)),...
            time(idx_zero+round((idx_end_spline-idx_zero)*3/5)),...
            time(idx_zero+round((idx_end_spline-idx_zero)*4/5)),...
            time(idx_end_spline)];
        y = [first_ast_zero,...
            first_ast_zero+(max_smoothing_prev-first_ast_zero)/7,...
            first_ast_zero+(max_smoothing_prev-first_ast_zero)*2/7,...
            first_ast_zero+(max_smoothing_prev-first_ast_zero)*3/7,...
            first_ast_zero+(max_smoothing_prev-first_ast_zero)*4/5,...
            first_ast_zero+(max_smoothing_prev-first_ast_zero)];
        xx = linspace(time(idx_zero),time(idx_end_spline),(idx_end_spline-idx_zero)+1);
        vector(idx_zero:idx_end_spline) = spline(x,y,xx);
        vector = smooth(vector,2);
end

end