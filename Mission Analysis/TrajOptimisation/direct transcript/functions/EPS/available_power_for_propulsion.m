function [P_propulsion] = available_power_for_propulsion(t, RR, TT, data)
%	available_power_for_propulsion- Compute the power available for the
%	propulsion system during the mission
%
% PROTOTYPE:
%  [P_propulsion] = available_power_for_propulsion(t, RR, TT, data)
%
% DESCRIPTION:
%   Compute the power available for the
%	propulsion system during the mission
%
%  INPUT :
%   t:      [Nx1] Array of times [years]
%   RR:     [Nx3] Array of vectors position in heliocentric cartesian frame [AU]
%   TT:     [Nx3] Array of vectors thrust (needed just for the orientation)
%   data:   Parameters referrred to thruster solar panels etc...
%         P_sa:                         [1] Power generated by the solar array [W]
%         eta_one_string_failure:       [1] Efficency due to one string failure [-]
%         eta_temperature:              [1] Rfficiency due to temperature [-]
%         D_cell_radiation:             [1] Degradation of cells efficency due to radiation per year [%/year]
%         D_cell_other:                 [1] Degradation of panels efficency due to other effects per year [%/year]
%         P_other_subsystem_margined:	[1] Power margined used by othger subsystems [W]
%         X_d:                          [1] Efficiency due to DET power transfer [-]
%         component_margin:             [1] Power margin on the component [-] 1.05=+5%
%
%  OUTPUT:
%   P_propulsion:                       [Nx1] Power available for propulsion subysstem [W]
%
%  FUNCTIONS CALLED:
%   solar_irradiance_cooler
% AUTHOR:
%   Marco Elia
%
% PREVIOUS VERSION:
%   \\
%
% CHANGELOG:
%   07/06/2021, Marco Elia
%
% -------------------------------------------------------------------------
% REFERENCES:

%distance from the sun
d_sun = vecnorm(RR,2,2);
eta_space = solar_irradiance_cooler(d_sun, 1, 1);

% angle of panels respect to sun
a_sun = acos(dot(RR,TT,2)./(vecnorm(TT,2,2).*d_sun)) -pi/2; 
eta_angle = cos(a_sun);

% degradation
eta_degradation = (1-data.D_cell_radiation-data.D_cell_other).^t;

%total efficency
eta = eta_space.*eta_angle.*eta_degradation.*data.eta_one_string_failure.*data.eta_temperature;
P_generated = data.P_sa*eta;

%efficiency of distribution, no battery charge
P_d_margined = P_generated*data.X_d;

P_propulsion_margined = P_d_margined - data.P_other_subsystem_margined;
%remove margin
P_propulsion = P_propulsion_margined/(1.2*data.component_margin);


end

